import asyncio
import os
import time

from aiogram import F, types, Router, Bot
from aiogram.filters import StateFilter
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext

from TG.crypto_pay_api_sdk import cryptopay

from sqlalchemy.ext.asyncio import AsyncSession

from Database import orm_query
from Database.models import USER_STATES
from TG import system_parametrs

from Game.TTT import strings as TTTStrings
from Game.TTT import game as TTTgame

from Game.Durak import strings as DurakStrings
from Game.Durak import game as DurakGame

from TG.game.filters import CurrentGameFilter
from TG.game.filters import Game_states


from TG.game.TicTacToe.kbds import ttt_game_buttons, TTT_game_callback_data
from TG.game.TicTacToe.handlers import start_game as TTT_Start_Game
from TG.pay.kbds import check_pay
from TG.pay.utils import getInv, getPayUrl

from TG.game.TicTacToe.handlers import router as TTT_router
from TG.game.Durak.handlers import router as Durak_router

from TG.game.kbds  import GameStartParametrsCallback

# 1 –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä—ã
# 2 –ø–æ–∏—Å–∫ –ª–æ–±–±–∏ —Å–æ —Å—Ö–æ–∂–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
# 3 –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–±–±–∏





    
router = Router()
router.include_router(TTT_router)
router.include_router(Durak_router)

Crypto = cryptopay.Crypto(token=os.getenv("CRYPTO_TOKEN"), testnet=False)





# –≠—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤? –ö–∞–∫ —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤ –∫–æ–¥–µ?
# –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã
async def insufficient_funds_for_the_bet(callback:types.CallbackQuery, callback_data:TTT_game_callback_data):
    await callback.message.delete()
    await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
    pay = Crypto.createInvoice("USDT", str(callback_data.bet), params={"description": "–û–ø–ª–∞—Ç–∞ –∏–≥—Ä—ã", "expires_in": 60})

    invoiceID = getInv(str(pay))
    URL = getPayUrl(str(pay))

    # await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {URL}",parse_mode='HTML', reply_markup=check_pay(invoiceID))

    await callback.message.answer_photo(FSInputFile('Sourses/icon/icon1.png'), caption=f"üí≥ –û–ø–ª–∞—Ç–∞ –∏–≥—Ä—ã\n\n"
                                                                                f"–í–∞—à –∞–π–¥–∏: <code>{str(callback.message.from_user.id)}</code>\n"
                                                                                f"ID –∑–∞–∫–∞–∑–∞: <b>{invoiceID}</b>\n"
                                                                                f"–°—É–º–º–∞: <b>{callback_data.bet} USDT</b>",
                                parse_mode='HTML', reply_markup=check_pay(invoiceID, URL))
    



# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:  
#
#    ‚Ññ1 - –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ 
# –ò–≥—Ä–æ–∫—É (–æ–±—ä–µ–∫—Ç User –≤ Database.models) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_A_GAME –∏ –ø–æ–ª—é find_game_parametrs - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–º –∏–≥—Ä—ã.
# –î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º WAITING_FOR_A_GAME –∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–≥—Ä—ã.
# –ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ—Ç—Å—è "–õ–æ–±–±–∏" (–¥–∞–ª–µ–µ –±—É–¥–µ—Ç —É–ø–æ–º–∏–Ω–∞—Ç—å—Å—è –∫–∞–∫ –ö–æ–º–Ω–∞—Ç–∞) (–æ–±—ä–µ–∫—Ç TTT_lobby –≤ Database.models), –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
# (id –æ–±–æ–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤, id —Å–æ–æ–±—â–µ–Ω–∏–π - –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —è–≤–ª—è—Ç—å—Å—è –ø–æ–ª–µ–º –¥–ª—è –∏–≥—Ä—ã —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).
#
# –ü—Ä–∏ —ç—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º WAITING_FOR_A_GAME –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ï—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–º–Ω–∞—Ç–µ —É–∫–∞–∑–∞–Ω id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ guest_id),
# –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–∞–º –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –ª–æ–±–±–∏ –∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.
#
# –î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã (—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª–µ–µ –≤ —ç—Ç–æ–º –∫–æ–¥–µ ‚Ññ2). 
async def start_game(callback:types.CallbackQuery, callback_data:GameStartParametrsCallback, state:FSMContext, session:AsyncSession):

    async def broke_connection():
        print(">>>>> Some went wrong + " + str(e))

        if(lobby != None):
            await lobby.delete(session = session)
        await state.clear()
        await orm_query.set_user_state(session = session, user_id = chat_id, state = USER_STATES.NOT_ACTIVE)
        await bot.send_message(text = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ä–≤–∞–ª–æ—Å—å üò¢. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –µ—â–µ —Ä–∞–∑", chat_id = chat_id)


    message = callback.message
    chat_id = callback.from_user.id
    bot = message.bot
    is_creator:bool
    user = await orm_query.get_user_by_id(session=session, user_id=callback.from_user.id)


    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ 


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    # if user.balance < callback_data.bet:
    #    return await insufficient_funds_for_the_bet(callback, callback_data)
    


    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await state.set_state(Game_states.Find_game)
    await orm_query.set_user_state(session = session, user_id = chat_id, state = USER_STATES.WAITING_FOR_A_GAME, find_game_parametrs = callback_data.game_parametrs)

    callback.message.delete()

    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–ª–∏ –ª–æ–±–±–∏, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    opponent, lobby = await find_opponent_or_invitation(message.bot, session = session, chat_id = message.chat.id, game_start_parametrs = callback_data.game_parametrs)
    
    await orm_query.set_user_state(session = session, user_id = chat_id, state = USER_STATES.IN_GAME)
    await state.set_state(Game_states.In_game)

# try:


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤—É—Ö –∫–æ–º–Ω–∞—Ç(lobby) —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø–æ–∫–∞ –¥–ª—è –Ω–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞)
    another_lobby = await orm_query.get_lobby_by_invitation(session = session, guest_id = chat_id)

    if(another_lobby != None):
        lobby = another_lobby

    if(lobby != None):
        is_creator = False
        opponent_id = lobby.creator_id
        opponent = await orm_query.get_user_by_id(session = session, user_id = opponent_id)

    elif(opponent != None):
        is_creator = True

        #–ü–æ—á–µ–º—É —Ç–æ –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è try except. –ü—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ - –Ω–∏–±—É–¥—å –Ω–∞ –∑–∞–º–µ–Ω—É      <<<<<<<<<<<<<<<<<
        lobby = await orm_query.create_lobby(session = session, creator_id = chat_id, guest_id = opponent.id, bet = callback_data.bet, game_name = callback_data.game_name, game_start_parametrs = callback_data.game_parametrs)
        
    else:
        await orm_query.set_user_state(session = session, user_id = chat_id, state = USER_STATES.NOT_ACTIVE)
        return await bot.send_message(text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –ª–æ–±–±–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ üò¢\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ", chat_id = chat_id)





    #‚Ññ2 - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã
    # –í –Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π TTT_Start_Game –∏ –¥—Ä –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ: 
    # –í–µ—Ç–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã
    await session.refresh(lobby)
    if(lobby == None):
        return await broke_connection()

    if(callback_data.game_name == TTTStrings.GAME_NAME):
        await TTT_Start_Game(bot = bot, chat_id = chat_id, state = state, session = session, start_game_parametrs = callback_data.game_parametrs, is_creator = is_creator, lobby = lobby, opponent = opponent)
    elif(callback_data.game_name == DurakStrings.GAME_NAME):
        pass 

        



    # except Exception as e:
    #     print(">>>>>>>>>>>> Make game exception: " + str(e))
    #     return await broke_connection()




async def find_opponent_or_invitation(bot:Bot, session:AsyncSession, chat_id:str, game_start_parametrs:str):
    
    
    message_to_display = await bot.send_message(text = \
            f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"+\
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {0}\n"
            f"|                 \n", chat_id = chat_id)
    message_to_display_id = message_to_display.message_id
    


    timer_start = time.time()
    waiting_time = 0
    bar_count = 0
    opponent = None
    lobby = None
    bar = "‚ö´Ô∏è"
    while(1):
        bar_count+=1
        waiting_time = int(time.time() - timer_start)

        if(bar_count > 3): bar_count = 0

        await bot.edit_message_text(text = \
            f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"+\
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {waiting_time}\n"
            f"|    {bar*bar_count}              \n", chat_id = chat_id, message_id = message_to_display_id)

        #–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è 
        # –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞ –∫–∞–∂–¥—ã–µ WAITING_UPDATE_TIME (—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –≤–µ–ª–∏—á–∏–Ω—É –≤ system_parametrs)
        if(waiting_time%system_parametrs.WAITING_UPDATE_TIME == 0):
            lobby = await orm_query.get_lobby_by_invitation(session = session, guest_id = chat_id)
            if(lobby != None): break
            opponent = await orm_query.get_user_who_want_to_play(session = session, ignore_user_id = chat_id, game_params = game_start_parametrs)
            if(opponent != None): break

        if(time.time() - timer_start > system_parametrs.MAXIMUM_WAITING_TIME): break

        await asyncio.sleep(1)

    await message_to_display.delete()
    return opponent, lobby


router.callback_query.register(start_game, GameStartParametrsCallback.filter(), StateFilter(None))#‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå