import asyncio

from aiogram import F, types, Router, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from TG import system_parametrs

from Database import orm_query
from Database.models import USER_STATES, User, Lobby

from Game.TTT import strings
from Game.TTT import game

from TG.game.filters import CurrentGameFilter

from TG.game.TicTacToe.kbds import ttt_game_buttons, finally_buttons, TTT_game_callback_data
from TG.menu.kbds import choise_TTT_buttons
from TG.pay.kbds import check_pay
from TG.pay.utils import getInv, getPayUrl

from TG.game.filters import Game_states


#–°–º–µ–Ω–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—É–±—Ä–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–π)
router = Router()

router.message.filter(CurrentGameFilter(strings.GAME_NAME), StateFilter(Game_states.In_game))
router.callback_query.filter(CurrentGameFilter(strings.GAME_NAME), StateFilter(Game_states.In_game))


#–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–µ game_name –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ state.data (—Ñ–∏–ª—å—Ç—Ä –æ–ø–∏—Å–∞–Ω –≤ TG/game/filters.py)—Ç–∞–∫ state
# –∑–∞–¥–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã 


#     1) –í –æ–±—ä–µ–∫—Ç–µ –∫–æ–º–Ω–∞—Ç—ã (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö):
# –ø–æ–ª–µ (—Ç–∞–∫ –∫–∞–∫ –≤ –æ–±—ä–µ–∫—Ç–∞—Ö, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã—Ö –æ—Ç Callback_data, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö).
#     2) –í –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSMcontest) (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å FSM):
# id –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞,
# id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞,
# letter - –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, –∑–∞ –∫–æ–≥–æ –∏–≥—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (SYMBOL_X –∏–ª–∏ SYMBOL_Y, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ Game/TinTacToe/strings.py).
#     3) –í –æ–±—ä–µ–∫—Ç–µ –∫–ª–∞—Å—Å–∞ Callback_data (TTT_game_callback_data, —Å–º. –≤ TG/game/TicTacToe/kbds.py (–¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–º):
# id –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
# —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–Ω —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç–µ lobby),
# —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è,
# –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ X –∏ Y, –≤ –∫–æ—Ç–æ—Ä—É—é —Å—Ö–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
# –∏ win_score - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–ª—è –ø–æ–±–µ–¥—ã.
# –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ User –≤ –ø–æ–ª–µ game_params - –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ç–æ –æ–Ω–æ —Ä–∞–≤–Ω–æ None).
# –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∞–º, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–≥—Ä—ã 

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É. –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ –∏ –º–µ–Ω—è—é—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫ –∏ –≤ state (FSMContext)
async def start_game(bot:Bot, chat_id:int, state:FSMContext, session:AsyncSession, start_game_parametrs:str, is_creator:bool, lobby:Lobby, opponent:User):

    
    lobby = await orm_query.get_lobby_by_id(session = session, lobby_id = lobby.id)
    game = await orm_query.get_game_by_id(session = session, game_name = strings.GAME_NAME, game_id = lobby.game_id)
    op_tag = opponent.tag if opponent.tag == None else "@" + opponent.tag


    message_to_display = await bot.send_message(chat_id = chat_id, text = f"–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent.name}  {op_tag}")
    message_to_display_2 = await bot.send_message(chat_id = chat_id, text = "...")


    if(not is_creator):
        await game.add_creator_field_message_id(session = session, field_message_id = message_to_display_2.message_id)
    else:
        await game.add_guest_field_message_id(session = session, field_message_id = message_to_display_2.message_id)



    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª–æ–±–±–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    opponent_field_message_id = None
    try_count = 0
    while(opponent_field_message_id == None):
        await session.refresh(game) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await session.refresh(lobby)
        if(is_creator):
            opponent_field_message_id = game.guest_field_message_id
            opponent_id = lobby.guest_id
        else:
            opponent_field_message_id = game.creator_field_message_id
            opponent_id = lobby.creator_id

        try_count += 1
        await asyncio.sleep(system_parametrs.WAITING_UPDATE_TIME)
        if(try_count > system_parametrs.MAXIMUM_TRY_COUNT):
            await state.clear()
            await orm_query.set_user_state(session = session, user_id = chat_id, state = USER_STATES.NOT_ACTIVE)
            await lobby.delete()
            return await bot.edit_message_text(text = f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", chat_id = chat_id, message_id = message_to_display.message_id)


    message_to_display_2 = await bot.send_message(chat_id = chat_id, text = "...")
    message_to_display_2_id = message_to_display_2.message_id


    game_name, n, m, win_score, bet = strings.get_start_game_parametrs(start_game_parametrs)
    field = f"{strings.SYMBOL_UNDEF}" * n * m
    letter = strings.SYMBOL_X if is_creator else strings.SYMBOL_O
    lobby_id = lobby.id
    callback_data = TTT_game_callback_data(lobby_id = lobby_id, X = 0, Y = 0, n = n, m = m, win_score = win_score)

    

    await state.update_data(letter = letter)
    await state.update_data(opponent_field_message_id = opponent_field_message_id)
    await state.update_data(opponent_id = opponent_id)
    
    await game.add_field(session = session, field = field)




    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–µ game_name –≤ FSMContext. –î–∞–Ω–Ω—ã–π –§–∏–ª—å—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ TG/game/filters.py
    # –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    await state.update_data(game_name = strings.GAME_NAME)
    await bot.edit_message_text(text = f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ {letter}", reply_markup = ttt_game_buttons(callback_data = callback_data, field = field), chat_id = chat_id, message_id = message_to_display_2_id)





async def TTT_playing_callback(callback:types.CallbackQuery, callback_data:TTT_game_callback_data, state:FSMContext, session:AsyncSession):

    async def end_game():
        await orm_query.set_user_state(session = session, user_id = callback.from_user.id, state = USER_STATES.NOT_ACTIVE)
        await orm_query.set_user_state(session = session, user_id = opponent_id, state = USER_STATES.NOT_ACTIVE)
        await state.update_data(game_name = "")
        await lobby.delete()

    state_data = await state.get_data()
    cbd = callback_data
    bot = callback.bot

    lobby = await orm_query.get_lobby_by_id(session = session, lobby_id = cbd.lobby_id)
    game = await orm_query.get_game_by_id(session = session, game_name = strings.GAME_NAME, game_id = lobby.game_id)
    field = [game.field[cbd.n*i:][:cbd.m] for i in range(cbd.n)]
    letter = state_data["letter"]
    opponent_field_message_id = state_data["opponent_field_message_id"]
    opponent_id = state_data["opponent_id"]

    if(not game.can_walk(symbol = letter, field = game.field)):
        return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥üö´")
    
    if(field[cbd.Y][cbd.X] != strings.SYMBOL_UNDEF):
        return await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç–∞–∫ —Å—Ö–æ–¥–∏—Ç—å!")
    
    field[cbd.Y] = field[cbd.Y][:cbd.X] + letter + field[cbd.Y][cbd.X + 1:]
    field_line = "".join(field)

    await game.set_field(session = session, field = field_line)
    await callback.message.edit_reply_markup(reply_markup = ttt_game_buttons(callback_data = cbd, field = field_line))
    await bot.edit_message_reply_markup(chat_id = opponent_id, message_id = opponent_field_message_id, \
                                        reply_markup = ttt_game_buttons(callback_data = cbd, field = field_line))
    
    result = game.is_win(FIELD = field, win_score = cbd.win_score)
    
    if(result == '–Ω–∏—á—å—è'):
        await bot.edit_message_text(text =\
        f"—É –≤–∞—Å –Ω–∏—á—å—è", chat_id = opponent_id, message_id = opponent_field_message_id, reply_markup = finally_buttons())
        await end_game()

    elif(result == letter):
        await bot.edit_message_text(text =\
        f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòî", chat_id = opponent_id, message_id = opponent_field_message_id, reply_markup = finally_buttons())

        # –û–ø–ª–∞—Ç–∞ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
        # await orm_query.del_user_balance(session=session, user_id=opponent_id, amount=int(callback_data.bet))
        # await orm_query.set_user_balance(session=session, user_id=callback.from_user.id, amount=int(float(callback_data.bet)))

        await orm_query.add_lose(session=session, user_id=opponent_id)
        await orm_query.add_win(session=session, user_id=callback.from_user.id)


        await callback.message.edit_text(text =\
                f"–ü–æ–±–µ–¥–∞!üèÜ\n"
                f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {str(float(callback_data.bet))} USDT",
            reply_markup=finally_buttons())

        await end_game()


@router.callback_query(F.data == "end_game")
async def end_game(callback:types.CallbackQuery, state:FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup = None)


@router.callback_query(F.data == "play_more")
async def play_more(callback:types.CallbackQuery, state:FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup = None)
    await callback.message.delete()

    await callback.message.answer_photo(FSInputFile('Sourses/icon/icon1.png'),f"üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                               parse_mode='HTML', reply_markup=choise_TTT_buttons())

        

router.callback_query.register(TTT_playing_callback, TTT_game_callback_data.filter())

